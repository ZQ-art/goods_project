{"remainingRequest":"C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\src\\api\\auth.js","dependencies":[{"path":"C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\src\\api\\auth.js","mtime":1602254433925},{"path":"C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1597490030034},{"path":"C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\node_modules\\babel-loader\\lib\\index.js","mtime":1597490029689}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\tyt\\\\Desktop\\\\\\u7F16\\u7A0B\\\\vscode\\\\\\u534E\\u5317\\u4E94\\u7701\\\\goods_project\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport config from \"@/config/config.json\";\nexport default {\n  loginApi: function () {\n    var _loginApi = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(data, vm) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //开启遮罩层\n              vm.$store.commit(\"changeLayShow\"); //发送请求\n\n              _context.next = 3;\n              return apiWarp(\"/signIn\", data, \"post\").then(function (res) {\n                if (res.data.status) {\n                  //登录成功\n                  vm.$notify({\n                    type: \"success\",\n                    message: res.data.msg,\n                    duration: \"1500\"\n                  });\n                  vm.$router.push({\n                    name: \"home\"\n                  }); //储存用户数据\n\n                  sessionStorage.setItem(\"userId\", vm.loginData.userName);\n                  sessionStorage.setItem(\"token\", res.data.token);\n                } else {\n                  //失败\n                  vm.$notify({\n                    type: \"danger\",\n                    message: res.data.msg,\n                    duration: \"1500\"\n                  });\n                }\n              }).catch(function (err) {\n                console.log(err);\n              });\n\n            case 3:\n              _context.next = 5;\n              return axios.post(config.fileUpload + '/getOssUrl', {\n                userId: data.userName\n              }).then(function (res) {\n                console.log(res);\n                var data = res.data;\n\n                if (data.status) {\n                  console.log('yes!');\n                  vm.$store.commit('getImgUrl', res.data.msg);\n                } else {\n                  vm.$notify({\n                    type: 'warning',\n                    message: data.msg\n                  });\n                }\n              }).catch(function (err) {\n                console.log(err);\n              });\n\n            case 5:\n              //关闭遮罩层\n              setTimeout(function () {\n                vm.$store.commit(\"changeLayShow\");\n              }, 500);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function loginApi(_x, _x2) {\n      return _loginApi.apply(this, arguments);\n    }\n\n    return loginApi;\n  }(),\n  registerApi: function () {\n    var _registerApi = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(data, vm) {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              //显示遮罩层\n              vm.$store.commit(\"changeLayShow\");\n              _context2.next = 3;\n              return apiWarp('/signUp', data, 'post').then(function (res) {\n                if (res.data.status) {\n                  //注册成功\n                  vm.$notify({\n                    type: \"success\",\n                    message: res.data.msg,\n                    duration: \"1500\"\n                  }); //跳转登录\n\n                  vm.loginPage = true; //清除数据\n\n                  vm.clearValue(vm.registerData);\n                  vm.vertify.input = \"\";\n                  vm.vertify.result = \"\";\n                } else {\n                  //失败\n                  vm.$notify({\n                    type: \"danger\",\n                    message: res.data.msg,\n                    duration: \"1500\"\n                  });\n                }\n              });\n\n            case 3:\n              //关闭遮罩层\n              setTimeout(function () {\n                vm.$store.commit(\"changeLayShow\");\n              }, 500);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function registerApi(_x3, _x4) {\n      return _registerApi.apply(this, arguments);\n    }\n\n    return registerApi;\n  }(),\n  phoneApi: function () {\n    var _phoneApi = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee3(data, vm) {\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return apiWarp('/send/' + data, '', 'get').then(function (res) {\n                if (res.data.status) {\n                  vm.vertify.result = res.data.msg;\n                } //防止短时间重复发送\n\n\n                vm.$notify({\n                  type: \"success\",\n                  message: \"60秒后可以再次发送\",\n                  duration: 5000\n                });\n                setTimeout(function () {\n                  vm.vertify.waiting = false;\n                }, 59000);\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function phoneApi(_x5, _x6) {\n      return _phoneApi.apply(this, arguments);\n    }\n\n    return phoneApi;\n  }()\n};\n\nvar apiWarp = function apiWarp(url, data, method) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4(resolve, reject) {\n      var target;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              target = config.severAddress;\n\n              if (!(method == \"get\")) {\n                _context4.next = 10;\n                break;\n              }\n\n              _context4.t0 = resolve;\n              _context4.next = 6;\n              return axios.get(target + url);\n\n            case 6:\n              _context4.t1 = _context4.sent;\n              (0, _context4.t0)(_context4.t1);\n              _context4.next = 16;\n              break;\n\n            case 10:\n              if (!(method == \"post\")) {\n                _context4.next = 16;\n                break;\n              }\n\n              _context4.t2 = resolve;\n              _context4.next = 14;\n              return axios.post(target + url, data);\n\n            case 14:\n              _context4.t3 = _context4.sent;\n              (0, _context4.t2)(_context4.t3);\n\n            case 16:\n              _context4.next = 21;\n              break;\n\n            case 18:\n              _context4.prev = 18;\n              _context4.t4 = _context4[\"catch\"](0);\n              reject(_context4.t4);\n\n            case 21:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 18]]);\n    }));\n\n    return function (_x7, _x8) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}; // // /getSomthing\n// const getNews = () => {\n//   return new Promise(async resolve => {\n//     let res = await askThings('/getSomething', 'GET');\n//     vm.$notify({\n//     })\n//     if (res.status) {\n//       resolve(res.data);\n//     } else {\n//       res.data = {\n//         status: false;\n//       }\n//       resolve(res.data);\n//     }\n//   })\n// }",{"version":3,"sources":["C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\src\\api\\auth.js"],"names":["axios","config","loginApi","data","vm","$store","commit","apiWarp","then","res","status","$notify","type","message","msg","duration","$router","push","name","sessionStorage","setItem","loginData","userName","token","catch","err","console","log","post","fileUpload","userId","setTimeout","registerApi","loginPage","clearValue","registerData","vertify","input","result","phoneApi","waiting","url","method","Promise","resolve","reject","target","severAddress","get"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,eAAe;AACbC,EAAAA,QAAQ;AAAA;AAAA;AAAA,4BAAE,iBAAOC,IAAP,EAAaC,EAAb;AAAA;AAAA;AAAA;AAAA;AACR;AACAA,cAAAA,EAAE,CAACC,MAAH,CAAUC,MAAV,CAAiB,eAAjB,EAFQ,CAGR;;AAHQ;AAAA,qBAIFC,OAAO,CAAC,SAAD,EAAYJ,IAAZ,EAAkB,MAAlB,CAAP,CACHK,IADG,CACE,UAACC,GAAD,EAAS;AACb,oBAAIA,GAAG,CAACN,IAAJ,CAASO,MAAb,EAAqB;AACnB;AACAN,kBAAAA,EAAE,CAACO,OAAH,CAAW;AACTC,oBAAAA,IAAI,EAAE,SADG;AAETC,oBAAAA,OAAO,EAAEJ,GAAG,CAACN,IAAJ,CAASW,GAFT;AAGTC,oBAAAA,QAAQ,EAAE;AAHD,mBAAX;AAKAX,kBAAAA,EAAE,CAACY,OAAH,CAAWC,IAAX,CAAgB;AACdC,oBAAAA,IAAI,EAAE;AADQ,mBAAhB,EAPmB,CAUnB;;AACAC,kBAAAA,cAAc,CAACC,OAAf,CAAuB,QAAvB,EAAiChB,EAAE,CAACiB,SAAH,CAAaC,QAA9C;AACAH,kBAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCX,GAAG,CAACN,IAAJ,CAASoB,KAAzC;AACD,iBAbD,MAaO;AACL;AACAnB,kBAAAA,EAAE,CAACO,OAAH,CAAW;AACTC,oBAAAA,IAAI,EAAE,QADG;AAETC,oBAAAA,OAAO,EAAEJ,GAAG,CAACN,IAAJ,CAASW,GAFT;AAGTC,oBAAAA,QAAQ,EAAE;AAHD,mBAAX;AAKD;AACF,eAvBG,EAwBHS,KAxBG,CAwBG,UAACC,GAAD,EAAS;AACdC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,eA1BG,CAJE;;AAAA;AAAA;AAAA,qBAgCAzB,KAAK,CAAC4B,IAAN,CAAW3B,MAAM,CAAC4B,UAAP,GAAkB,YAA7B,EAA0C;AAACC,gBAAAA,MAAM,EAAC3B,IAAI,CAACmB;AAAb,eAA1C,EAAkEd,IAAlE,CAAuE,UAACC,GAAD,EAAO;AAClFiB,gBAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACA,oBAAIN,IAAI,GAACM,GAAG,CAACN,IAAb;;AACA,oBAAGA,IAAI,CAACO,MAAR,EAAe;AACbgB,kBAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAvB,kBAAAA,EAAE,CAACC,MAAH,CAAUC,MAAV,CAAiB,WAAjB,EAA6BG,GAAG,CAACN,IAAJ,CAASW,GAAtC;AACD,iBAHD,MAGK;AACHV,kBAAAA,EAAE,CAACO,OAAH,CAAW;AACTC,oBAAAA,IAAI,EAAC,SADI;AAETC,oBAAAA,OAAO,EAACV,IAAI,CAACW;AAFJ,mBAAX;AAID;AACF,eAZK,EAYHU,KAZG,CAYG,UAACC,GAAD,EAAO;AACdC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,eAdK,CAhCA;;AAAA;AA+CR;AACAM,cAAAA,UAAU,CAAC,YAAM;AACf3B,gBAAAA,EAAE,CAACC,MAAH,CAAUC,MAAV,CAAiB,eAAjB;AACD,eAFS,EAEP,GAFO,CAAV;;AAhDQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADK;AAqDP0B,EAAAA,WArDO;AAAA;AAAA;AAAA,8CAqDK7B,IArDL,EAqDWC,EArDX;AAAA;AAAA;AAAA;AAAA;AAsDX;AACAA,cAAAA,EAAE,CAACC,MAAH,CAAUC,MAAV,CAAiB,eAAjB;AAvDW;AAAA,qBAwDLC,OAAO,CAAC,SAAD,EAAYJ,IAAZ,EAAkB,MAAlB,CAAP,CACHK,IADG,CACE,UAACC,GAAD,EAAS;AACb,oBAAIA,GAAG,CAACN,IAAJ,CAASO,MAAb,EAAqB;AACnB;AACAN,kBAAAA,EAAE,CAACO,OAAH,CAAW;AACTC,oBAAAA,IAAI,EAAE,SADG;AAETC,oBAAAA,OAAO,EAAEJ,GAAG,CAACN,IAAJ,CAASW,GAFT;AAGTC,oBAAAA,QAAQ,EAAE;AAHD,mBAAX,EAFmB,CAOnB;;AACAX,kBAAAA,EAAE,CAAC6B,SAAH,GAAe,IAAf,CARmB,CASnB;;AACA7B,kBAAAA,EAAE,CAAC8B,UAAH,CAAc9B,EAAE,CAAC+B,YAAjB;AACA/B,kBAAAA,EAAE,CAACgC,OAAH,CAAWC,KAAX,GAAmB,EAAnB;AACAjC,kBAAAA,EAAE,CAACgC,OAAH,CAAWE,MAAX,GAAoB,EAApB;AACD,iBAbD,MAaO;AACL;AACAlC,kBAAAA,EAAE,CAACO,OAAH,CAAW;AACTC,oBAAAA,IAAI,EAAE,QADG;AAETC,oBAAAA,OAAO,EAAEJ,GAAG,CAACN,IAAJ,CAASW,GAFT;AAGTC,oBAAAA,QAAQ,EAAE;AAHD,mBAAX;AAKD;AACF,eAvBG,CAxDK;;AAAA;AAgFX;AACAgB,cAAAA,UAAU,CAAC,YAAM;AACf3B,gBAAAA,EAAE,CAACC,MAAH,CAAUC,MAAV,CAAiB,eAAjB;AACD,eAFS,EAEP,GAFO,CAAV;;AAjFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqFPiC,EAAAA,QArFO;AAAA;AAAA;AAAA,8CAqFEpC,IArFF,EAqFQC,EArFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAsFLG,OAAO,CAAC,WAAWJ,IAAZ,EAAkB,EAAlB,EAAsB,KAAtB,CAAP,CACHK,IADG,CACE,UAACC,GAAD,EAAS;AACb,oBAAIA,GAAG,CAACN,IAAJ,CAASO,MAAb,EAAqB;AACnBN,kBAAAA,EAAE,CAACgC,OAAH,CAAWE,MAAX,GAAoB7B,GAAG,CAACN,IAAJ,CAASW,GAA7B;AACD,iBAHY,CAIb;;;AACAV,gBAAAA,EAAE,CAACO,OAAH,CAAW;AACTC,kBAAAA,IAAI,EAAE,SADG;AAETC,kBAAAA,OAAO,EAAE,YAFA;AAGTE,kBAAAA,QAAQ,EAAE;AAHD,iBAAX;AAKAgB,gBAAAA,UAAU,CAAC,YAAM;AACf3B,kBAAAA,EAAE,CAACgC,OAAH,CAAWI,OAAX,GAAqB,KAArB;AACD,iBAFS,EAEP,KAFO,CAAV;AAGD,eAdG,CAtFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAf;;AAwGA,IAAMjC,OAAO,GAAG,SAAVA,OAAU,CAACkC,GAAD,EAAMtC,IAAN,EAAYuC,MAAZ,EAAuB;AACrC,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXC,cAAAA,MAFW,GAEF7C,MAAM,CAAC8C,YAFL;;AAAA,oBAGXL,MAAM,IAAI,KAHC;AAAA;AAAA;AAAA;;AAAA,6BAIbE,OAJa;AAAA;AAAA,qBAIC5C,KAAK,CAACgD,GAAN,CAAUF,MAAM,GAAGL,GAAnB,CAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAKJC,MAAM,IAAI,MALN;AAAA;AAAA;AAAA;;AAAA,6BAMbE,OANa;AAAA;AAAA,qBAMC5C,KAAK,CAAC4B,IAAN,CAAWkB,MAAM,GAAGL,GAApB,EAAyBtC,IAAzB,CAND;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASf0C,cAAAA,MAAM,cAAN;;AATe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAYD,CAbD,C,CAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\r\nimport config from \"@/config/config.json\";\r\n\r\nexport default {\r\n  loginApi: async (data, vm) => {\r\n    //开启遮罩层\r\n    vm.$store.commit(\"changeLayShow\");\r\n    //发送请求\r\n    await apiWarp(\"/signIn\", data, \"post\")\r\n      .then((res) => {\r\n        if (res.data.status) {\r\n          //登录成功\r\n          vm.$notify({\r\n            type: \"success\",\r\n            message: res.data.msg,\r\n            duration: \"1500\",\r\n          });\r\n          vm.$router.push({\r\n            name: \"home\",\r\n          });\r\n          //储存用户数据\r\n          sessionStorage.setItem(\"userId\", vm.loginData.userName);\r\n          sessionStorage.setItem(\"token\", res.data.token);\r\n        } else {\r\n          //失败\r\n          vm.$notify({\r\n            type: \"danger\",\r\n            message: res.data.msg,\r\n            duration: \"1500\",\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n      //请求头像url\r\n      await axios.post(config.fileUpload+'/getOssUrl',{userId:data.userName}).then((res)=>{\r\n        console.log(res);\r\n        let data=res.data\r\n        if(data.status){\r\n          console.log('yes!');\r\n          vm.$store.commit('getImgUrl',res.data.msg)\r\n        }else{\r\n          vm.$notify({\r\n            type:'warning',\r\n            message:data.msg\r\n          })\r\n        }\r\n      }).catch((err)=>{\r\n        console.log(err);\r\n      })\r\n    //关闭遮罩层\r\n    setTimeout(() => {\r\n      vm.$store.commit(\"changeLayShow\");\r\n    }, 500);\r\n  },\r\n  async registerApi(data, vm) {\r\n    //显示遮罩层\r\n    vm.$store.commit(\"changeLayShow\");\r\n    await apiWarp('/signUp', data, 'post')\r\n      .then((res) => {\r\n        if (res.data.status) {\r\n          //注册成功\r\n          vm.$notify({\r\n            type: \"success\",\r\n            message: res.data.msg,\r\n            duration: \"1500\",\r\n          });\r\n          //跳转登录\r\n          vm.loginPage = true;\r\n          //清除数据\r\n          vm.clearValue(vm.registerData);\r\n          vm.vertify.input = \"\";\r\n          vm.vertify.result = \"\";\r\n        } else {\r\n          //失败\r\n          vm.$notify({\r\n            type: \"danger\",\r\n            message: res.data.msg,\r\n            duration: \"1500\",\r\n          });\r\n        }\r\n      });\r\n    //关闭遮罩层\r\n    setTimeout(() => {\r\n      vm.$store.commit(\"changeLayShow\");\r\n    }, 500);\r\n  },\r\n  async phoneApi(data, vm) {\r\n    await apiWarp('/send/' + data, '', 'get')\r\n      .then((res) => {\r\n        if (res.data.status) {\r\n          vm.vertify.result = res.data.msg;\r\n        }\r\n        //防止短时间重复发送\r\n        vm.$notify({\r\n          type: \"success\",\r\n          message: \"60秒后可以再次发送\",\r\n          duration: 5000,\r\n        });\r\n        setTimeout(() => {\r\n          vm.vertify.waiting = false;\r\n        }, 59000);\r\n      });\r\n  },\r\n};\r\n\r\nconst apiWarp = (url, data, method) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      let target = config.severAddress\r\n      if (method == \"get\") {\r\n        resolve(await axios.get(target + url));\r\n      } else if (method == \"post\") {\r\n        resolve(await axios.post(target + url, data));\r\n      }\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n  });\r\n};\r\n\r\n// // /getSomthing\r\n// const getNews = () => {\r\n//   return new Promise(async resolve => {\r\n//     let res = await askThings('/getSomething', 'GET');\r\n//     vm.$notify({\r\n\r\n//     })\r\n//     if (res.status) {\r\n//       resolve(res.data);\r\n//     } else {\r\n//       res.data = {\r\n//         status: false;\r\n//       }\r\n//       resolve(res.data);\r\n//     }\r\n//   })\r\n// }"]}]}