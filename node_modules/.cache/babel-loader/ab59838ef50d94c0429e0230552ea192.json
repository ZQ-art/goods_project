{"remainingRequest":"C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\src\\api\\websocket.js","dependencies":[{"path":"C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\src\\api\\websocket.js","mtime":1602243624826},{"path":"C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1597490030034},{"path":"C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\node_modules\\babel-loader\\lib\\index.js","mtime":1597490029689}],"contextDependencies":[],"result":["import SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport config from '@/config/config.json'; //设置地址\n\nvar url = config.webSocket; // 设置 STOMP 客户端\n\nvar stompClient = null; // 设置 WebSocket 进入端点\n\nvar SOCKET_ENDPOINT = url + \"/mydlq\"; // 设置订阅消息的请求地址前缀\n\nvar SUBSCRIBE_PREFIX = \"/queue\"; // 设置订阅地址\n\nvar SUBSCRIBE = \"\"; // 设置服务器端点，访问服务器中哪个接口\n\nvar SEND_ENDPOINT = \"/app/test\";\nexport default {\n  /* 进行连接 */\n  connect: function connect(vm) {\n    // 设置 SOCKET  \n    var socket = new SockJS(SOCKET_ENDPOINT); // 配置 STOMP 客户端\n\n    stompClient = Stomp.over(socket); // STOMP 客户端连接\n\n    stompClient.connect({}, function (frame) {\n      console.log(\"连接成功\");\n      /* 订阅信息，将收到的内容展示进行展示 */\n\n      SUBSCRIBE = SUBSCRIBE_PREFIX + '/test'; // 输出订阅地址\n\n      console.log(\"设置订阅地址为：\" + SUBSCRIBE); // 执行订阅消息，客户端想要接受来自服务器的消息推送就必须订阅相关的url\n      //第一个参数 为服务器 @SendTo 匹配的 URL，字符串\n      //第二个参数是接受到服务器的消息之后执行的回调函数\n\n      stompClient.subscribe('/user/queue/test', function (responseBody) {\n        var receiveMessage = JSON.parse(responseBody.body); //挂载数据\n\n        vm.chatRoom.list.push({\n          component: 'leftMsg',\n          content: receiveMessage.content\n        });\n      });\n    }, function (err) {\n      console.log(err);\n    });\n  },\n\n  /* 断开连接 */\n  disconnect: function disconnect() {\n    stompClient.disconnect(function () {\n      console.log(\"断开连接\");\n    });\n  },\n\n  /* 发送消息并指定目标地址 */\n  sendMessageNoParameter: function sendMessageNoParameter(data) {\n    // 设置发送的内容\n    var sendContent = data.msg; // 设置发送的用户\n\n    var sendUser = data.user; // 设置待发送的消息内容\n\n    var message = '{\"targetUser\":\"' + sendUser + '\", \"destination\": \"' + SUBSCRIBE + '\", \"content\": \"' + sendContent + '\"}'; // 发送消息\n    //第一个参数 为服务器 controller中 @MessageMapping，必须参数\n    //第二个参数是发送信息的header是js对象，可选参数\n    //第三个参数是要发送的信息，可选参数\n\n    stompClient.send(SEND_ENDPOINT, {}, message);\n  }\n};",{"version":3,"sources":["C:\\Users\\tyt\\Desktop\\编程\\vscode\\华北五省\\goods_project\\src\\api\\websocket.js"],"names":["SockJS","Stomp","config","url","webSocket","stompClient","SOCKET_ENDPOINT","SUBSCRIBE_PREFIX","SUBSCRIBE","SEND_ENDPOINT","connect","vm","socket","over","frame","console","log","subscribe","responseBody","receiveMessage","JSON","parse","body","chatRoom","list","push","component","content","err","disconnect","sendMessageNoParameter","data","sendContent","msg","sendUser","user","message","send"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAEA;;AACA,IAAIC,GAAG,GAAGD,MAAM,CAACE,SAAjB,C,CACA;;AACA,IAAIC,WAAW,GAAG,IAAlB,C,CACA;;AACA,IAAIC,eAAe,GAAGH,GAAG,GAAG,QAA5B,C,CACA;;AACA,IAAII,gBAAgB,GAAG,QAAvB,C,CACA;;AACA,IAAIC,SAAS,GAAG,EAAhB,C,CACA;;AACA,IAAIC,aAAa,GAAG,WAApB;AAEA,eAAe;AACb;AACAC,EAAAA,OAFa,mBAELC,EAFK,EAED;AACV;AACA,QAAIC,MAAM,GAAG,IAAIZ,MAAJ,CAAWM,eAAX,CAAb,CAFU,CAGV;;AACAD,IAAAA,WAAW,GAAGJ,KAAK,CAACY,IAAN,CAAWD,MAAX,CAAd,CAJU,CAKV;;AACAP,IAAAA,WAAW,CAACK,OAAZ,CAAoB,EAApB,EAAwB,UAAUI,KAAV,EAAiB;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEA;;AACAR,MAAAA,SAAS,GAAGD,gBAAgB,GAAG,OAA/B,CAJuC,CAKvC;;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaR,SAAzB,EANuC,CAOvC;AACA;AACA;;AACAH,MAAAA,WAAW,CAACY,SAAZ,CAAsB,kBAAtB,EAA0C,UAAUC,YAAV,EAAwB;AAChE,YAAIC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACI,IAAxB,CAArB,CADgE,CAEhE;;AACAX,QAAAA,EAAE,CAACY,QAAH,CAAYC,IAAZ,CAAiBC,IAAjB,CAAsB;AAACC,UAAAA,SAAS,EAAC,SAAX;AAAqBC,UAAAA,OAAO,EAACR,cAAc,CAACQ;AAA5C,SAAtB;AACD,OAJD;AAKD,KAfD,EAeG,UAACC,GAAD,EAAS;AACVb,MAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;AACD,KAjBD;AAkBD,GA1BY;;AA4Bb;AACAC,EAAAA,UA7Ba,wBA6BA;AACXxB,IAAAA,WAAW,CAACwB,UAAZ,CAAuB,YAAY;AACjCd,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,KAFD;AAGD,GAjCY;;AAmCb;AACAc,EAAAA,sBApCa,kCAoCUC,IApCV,EAoCgB;AAC3B;AACA,QAAMC,WAAW,GAAGD,IAAI,CAACE,GAAzB,CAF2B,CAG3B;;AACA,QAAMC,QAAQ,GAAGH,IAAI,CAACI,IAAtB,CAJ2B,CAK3B;;AACA,QAAMC,OAAO,GAAG,oBAAoBF,QAApB,GAA+B,qBAA/B,GAAuD1B,SAAvD,GAAmE,iBAAnE,GAAuFwB,WAAvF,GAAqG,IAArH,CAN2B,CAO3B;AACA;AACA;AACA;;AACA3B,IAAAA,WAAW,CAACgC,IAAZ,CAAiB5B,aAAjB,EAAgC,EAAhC,EAAoC2B,OAApC;AACD;AAhDY,CAAf","sourcesContent":["import SockJS from 'sockjs-client'\r\nimport Stomp from 'stompjs'\r\nimport config from '@/config/config.json'\r\n\r\n//设置地址\r\nvar url = config.webSocket;\r\n// 设置 STOMP 客户端\r\nvar stompClient = null;\r\n// 设置 WebSocket 进入端点\r\nvar SOCKET_ENDPOINT = url + \"/mydlq\";\r\n// 设置订阅消息的请求地址前缀\r\nvar SUBSCRIBE_PREFIX = \"/queue\";\r\n// 设置订阅地址\r\nvar SUBSCRIBE = \"\";\r\n// 设置服务器端点，访问服务器中哪个接口\r\nvar SEND_ENDPOINT = \"/app/test\";\r\n\r\nexport default {\r\n  /* 进行连接 */\r\n  connect(vm) {\r\n    // 设置 SOCKET  \r\n    var socket = new SockJS(SOCKET_ENDPOINT);\r\n    // 配置 STOMP 客户端\r\n    stompClient = Stomp.over(socket);\r\n    // STOMP 客户端连接\r\n    stompClient.connect({}, function (frame) {\r\n      console.log(\"连接成功\");\r\n\r\n      /* 订阅信息，将收到的内容展示进行展示 */\r\n      SUBSCRIBE = SUBSCRIBE_PREFIX + '/test';\r\n      // 输出订阅地址\r\n      console.log(\"设置订阅地址为：\" + SUBSCRIBE);\r\n      // 执行订阅消息，客户端想要接受来自服务器的消息推送就必须订阅相关的url\r\n      //第一个参数 为服务器 @SendTo 匹配的 URL，字符串\r\n      //第二个参数是接受到服务器的消息之后执行的回调函数\r\n      stompClient.subscribe('/user/queue/test', function (responseBody) {\r\n        var receiveMessage = JSON.parse(responseBody.body);\r\n        //挂载数据\r\n        vm.chatRoom.list.push({component:'leftMsg',content:receiveMessage.content})\r\n      });\r\n    }, (err) => {\r\n      console.log(err);\r\n    });\r\n  },\r\n\r\n  /* 断开连接 */\r\n  disconnect() {\r\n    stompClient.disconnect(function () {\r\n      console.log(\"断开连接\");\r\n    });\r\n  },\r\n\r\n  /* 发送消息并指定目标地址 */\r\n  sendMessageNoParameter(data) {\r\n    // 设置发送的内容\r\n    const sendContent = data.msg;\r\n    // 设置发送的用户\r\n    const sendUser = data.user;\r\n    // 设置待发送的消息内容\r\n    const message = '{\"targetUser\":\"' + sendUser + '\", \"destination\": \"' + SUBSCRIBE + '\", \"content\": \"' + sendContent + '\"}';\r\n    // 发送消息\r\n    //第一个参数 为服务器 controller中 @MessageMapping，必须参数\r\n    //第二个参数是发送信息的header是js对象，可选参数\r\n    //第三个参数是要发送的信息，可选参数\r\n    stompClient.send(SEND_ENDPOINT, {}, message);\r\n  }\r\n}"]}]}